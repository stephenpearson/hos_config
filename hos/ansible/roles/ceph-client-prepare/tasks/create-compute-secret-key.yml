#
# (c) Copyright 2015-2016 Hewlett Packard Enterprise Development Company LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---

- include_vars: ceph_user_model.yml

- name: ceph-client-prepare | create-compute-secret-key | Create key file
  command: ceph --cluster {{ ceph_cluster }} auth get-key client.{{ item.user.name }} -o /etc/ceph/client.{{ item.user.name }}.key
  when: item.user.secret_id is defined
  with_items: "{{ ceph_user_models }}"
  delegate_to: "{{ ceph_admin_node }}"

# key copy is a two step-operation to avoid firewall issues

# Ensure directory exists at target(s)
- name: ceph-client-prepare | create-compute-secret-key | Create a temporary directory at target
  command: mktemp -d
  register: ceph_mktempdir_result

# Ensure directory exists on deployer
- name: ceph-client-prepare | create-compute-secret-key | Create a local temporary directory
  command: mktemp -d
  register: ceph_local_mktempdir_result
  delegate_to: "localhost"
  run_once: yes
  become: no
  # must be owned by local user for successful fetch operation

# 1. copy to deployment node
- name: ceph-client-prepare | create-compute-secret-key | Stage key for deployment
  fetch:
    src: "/etc/ceph/client.{{ item.user.name }}.key"
    dest: "{{ ceph_local_mktempdir_result.stdout }}/"
    flat: yes
  delegate_to: "{{ ceph_admin_node }}"
  run_once: yes
  when: item.user.secret_id is defined
  with_items: "{{ ceph_user_models }}"

# 2. copy key to target
- name: ceph-client-prepare | create-compute-secret-key | Copy key file to "{{ ceph_mktempdir_result.stdout }}"
  copy:
    src: "{{ ceph_local_mktempdir_result.stdout }}/client.{{ item.user.name }}.key"
    dest: "{{ ceph_mktempdir_result.stdout }}/client.{{ item.user.name }}.key"
    owner: "{{ ceph_user }}"
    group: "{{ ceph_group }}"
    mode: 0644
  when: item.user.secret_id is defined
  with_items: "{{ ceph_user_models }}"

- name: ceph-client-prepare | create-compute-secret-key | Delete local temporary directory "{{ ceph_local_mktempdir_result.stdout }}"
  file:
    dest: "{{  ceph_local_mktempdir_result.stdout }}"
    state: absent
  delegate_to: "localhost"
  run_once: yes

- name: ceph-client-prepare | create-compute-secret-key | Generate "{{ ceph_mktempdir_result.stdout }}/{{ item.user.name }}.xml"
  template:
    src: secret.xml.j2
    dest: "{{ ceph_mktempdir_result.stdout }}/{{ item.user.name }}.xml"
    owner: "{{ ceph_user }}"
    group: "{{ ceph_group }}"
    mode: 0644
  when: item.user.secret_id is defined
  with_items: "{{ ceph_user_models }}"

- name: ceph-client-prepare | create-compute-secret-key | Define the secret
  command: virsh secret-define --file {{ ceph_mktempdir_result.stdout }}/{{ item.user.name }}.xml
  when: item.user.secret_id is defined
  with_items: "{{ ceph_user_models }}"

- name: ceph-client-prepare | create-compute-secret-key | Set secret value
  shell: 'virsh secret-set-value --secret {{ item.user.secret_id }} --base64 $(cat {{ ceph_mktempdir_result.stdout }}/client.{{ item.user.name }}.key)'
  when: item.user.secret_id is defined
  with_items: "{{ ceph_user_models }}"

- name: ceph-client-prepare | create-compute-secret-key | Delete temporary directory "{{ ceph_mktempdir_result.stdout }}"
  file:
    dest: "{{ ceph_mktempdir_result.stdout }}"
    state: absent

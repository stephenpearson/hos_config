#!/bin/sh
#
# (c) Copyright 2016 Hewlett Packard Enterprise Development Company LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

monasca=`which monasca`
nova=/opt/stack/service/novaclient/venv/bin/nova

if [ -z "$monasca" ]; then
    echo "Unable to proceed, monasca executable not found."
    exit 1
fi
if [ ! -x "$nova" ]; then
    echo "Unable to proceed, nova executable not found."
    exit 1
fi

export OS_USERNAME="{{ MON_API.consumes_KEY_API.vars.keystone_monasca_user }}"
export OS_PASSWORD="{{ MON_API.consumes_KEY_API.vars.keystone_monasca_password | quote }}"
export OS_PROJECT_NAME={{ KEY_API.vars.keystone_admin_tenant }}
export OS_AUTH_URL={{ KEY_API.advertises.vips.private[0].url }}/v3
export OS_PROJECT_DOMAIN_NAME={{ KEY_API.vars.keystone_default_domain }}
export OS_USER_DOMAIN_NAME={{ KEY_API.vars.keystone_default_domain }}
export OS_AUTH_VERSION=3
export OS_ENDPOINT_TYPE=internalURL

# Build a list of unique undetermined VM alarm IDs
alarm_list=$($monasca alarm-list --state UNDETERMINED --metric-dimension component=vm 2>&1)
if [ $? != 0 -a -n "$alarm_list" ]; then
    echo "'$monasca alarm-list' command failed ($alarm_list)"
    exit 2
fi
alarm_ids=$(echo "$alarm_list" | cut -d'|' -f2 | grep -v -- --- | grep -- - | sort -u)

# Exit if no action is necessary
if [ -z "$alarm_ids" ]; then
    exit 0
fi

# Verify admin credentials
$nova list --all-tenants >/dev/null 2>&1
if [ $? != 0 ]; then
    echo "Admin credentials invalid, will not delete alarms"
    exit 3
fi

# Delete alarm IDs for VMs that no longer exist
for alarm in $alarm_ids; do
    resource_id=`$monasca alarm-show $alarm 2>&1 |grep resource_id | cut -d'"' -f4 |sort -u`
    if [ `echo $resource_id |grep -c ' '` != 0 ]; then
        echo "Found multiple VMs in one alarm.  Skipping deletion of $alarm (VMs: $resource_id)"
        continue
    fi
    $nova show $resource_id >/dev/null 2>&1
    if [ $? != 0 ]; then
        # Delete alarm, only output status if run from command line (not cron)
        if [ -t 1 ]; then
            echo "Deleting alarm $alarm for non-existent VM $resource_id"
        fi
        $monasca alarm-delete $alarm >/dev/null
    fi
done

exit 0

#
# (c) Copyright 2015-2016 Hewlett Packard Enterprise Development Company LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---
# TODO network_interface alarms

- name: swift-monitor | monasca-alarms | Setup default email notification method
  monasca_notification_method:
    name: "Default Email"
    type: 'EMAIL'
    address: "root@localhost"
    keystone_url: "{{ keystone_url }}"
    keystone_user: "{{ keystone_user }}"
    keystone_password: "{{ keystone_password | quote }}"
    keystone_project: "{{ keystone_project }}"
    monasca_api_url: "{{ monasca_alarm_definition_api_url }}"
    overwrite: false
  register: default_notification
  run_once: true

- name: swift-monitor  | monasca_alarms | Create monasca alarm definitions
  run_once: true
  monasca_alarm_definition:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    severity: "{{ item.severity }}"
    expression: "{{ item.expression }}"
    match_by: "{{ item.match_by }}"
    keystone_url: "{{ keystone_url }}"
    keystone_user: "{{ keystone_user }}"
    keystone_password: "{{ keystone_password }}"
    keystone_project: "{{ keystone_project }}"
    monasca_api_url: "{{ monasca_alarm_definition_api_url }}"
    ok_actions:
      - "{{ default_notification.notification_method_id }}"
    undetermined_actions:
      - "{{ default_notification.notification_method_id }}"
    alarm_actions:
      - "{{ default_notification.notification_method_id }}"
  with_items:
    - { name: "swiftlm-scan monitor",
        description: "Alarms if swiftlm-scan cannot execute a monitoring task",
        severity: "HIGH",
        expression: "swiftlm.swiftlm_check > 1",
        match_by: ["hostname"]}

    - { name: "Swift file ownership",
        description: "Alarms if files/directories in /srv/node/ or /etc/swift are not owned by Swift.",
        severity: "HIGH",
        expression: "swiftlm.swift.file_ownership > 1",
        match_by: ["hostname"]}

    - { name: "Drive URE errors",
        description: "Alarms if swift-drive-audit reports a unrecoverable read error on a drive used by Swift",
        severity: "HIGH",
        expression: "swiftlm.swift.drive_audit > 1",
        match_by: ["hostname"]}

    - { name: "Swift service",
        description: "Alarms if a Swift process is not running.",
        severity: "HIGH",
        expression: "swiftlm.swift.swift_services > 1",
        match_by: ["hostname", "component"]}

    - { name: "Swift filesystem mount status",
        description: "Alarms if a filesystem/drive used by Swift in not correctly mounted",
        severity: "HIGH",
        expression: "swiftlm.systems.check_mounts > 1",
        match_by: ["hostname"]}

    - { name: "Swift host socket connect",
        description: "Alarms if a socket cannot be opened to the specified host and port",
        severity: "HIGH",
        expression: "swiftlm.systems.connectivity.connect_check > 1",
        match_by: ["hostname"]}

    - { name: "Swift memcached connect",
        description: "Alarms if a socket cannot be opened to the specified memcached server",
        severity: "HIGH",
        expression: "swiftlm.systems.connectivity.memcache_check > 1",
        match_by: ["hostname"]}

    - { name: "Swift rsync connect",
        description: "Alarms if a socket cannot be opened to the specified rsync server",
        severity: "HIGH",
        expression: "swiftlm.systems.connectivity.rsync_check > 1",
        match_by: ["hostname"]}

    - { name: "Swift rings checksum",
        description: "Alarms if the swift rings checksums do not match on all hosts",
        severity: "HIGH",
        expression: "swiftlm.md5sum.cp.check.ring_checksums > 1",
        match_by: ["control_plane", "cloud_name"]}

    - { name: "Swift account replicator last completed in 12 hours",
        description: "Alarms if a swift account replicator has not completed in 12 hours",
        severity: "MEDIUM",
        expression: "swiftlm.replication.cp.max.account_last > {{ 60 * 60 * 12 }}",
        match_by: ["control_plane", "cloud_name"]}

    - { name: "Swift container replicator last completed in 12 hours",
        description: "Alarms if a swift container replicator has not completed in 12 hours",
        severity: "MEDIUM",
        expression: "swiftlm.replication.cp.max.container_last > {{ 60 * 60 * 12 }}",
        match_by: ["control_plane", "cloud_name"]}

    - { name: "Swift object replicator last completed in 24 hours",
        description: "Alarms if a swift object replicator has not completed in 24 hours",
        severity: "MEDIUM",
        expression: "swiftlm.replication.cp.max.object_last > {{ 60 * 60 * 24 }}",
        match_by: ["control_plane", "cloud_name"]}

    # The following 2 alarms are used to detect when an individual swift
    # filesystem exceeds a certain usage level e.g. 80% is a MEDIUM alarm and
    # 90% is a HIGH alarm. Note the metric is a host rather than aggregated
    # cp metric
    - { name: "Swift individual disk usage exceeds 80%",
        description: "Alarms if the swift individual disk usage exceeds the 80%",
        severity: "MEDIUM",
        expression:
          "swiftlm.diskusage.host.max.usage > 80 and swiftlm.diskusage.host.max.usage <= 90",
        match_by: ["hostname"]}

    - { name: "Swift individual disk usage exceeds 90%",
        description: "Alarms if the swift individual disk usage usage exceeds 90%",
        severity: "HIGH",
        expression: "swiftlm.diskusage.host.max.usage > 90",
        match_by: ["hostname"]}

    # The following 2 alarms are used to detect when the average of all swift
    # filesystems exceeds a certain usage level e.g. 80% is a MEDIUM alarm and
    # 90% is a HIGH alarm. This should equate to alarming when the total used
    # storage exceeds 80% and 90%.
    - { name: "Swift total disk usage exceeds 80%",
        description: "Alarms if the swift total disk usage exceeds 80%",
        severity: "MEDIUM",
        expression: "swiftlm.diskusage.cp.avg.usage > 80 and swiftlm.diskusage.cp.avg.usage <= 90",
        match_by: ["control_plane", "cloud_name"]}

    - { name: "Swift total disk usage exceeds 90%",
        description: "Alarms if the swift total disk usage exceeds 90%",
        severity: "HIGH",
        expression: "swiftlm.diskusage.cp.avg.usage > 90",
        match_by: ["control_plane", "cloud_name"]}

    # This alarm reports down as 0 when the Keystone auth or the
    # Swift Object Store rest-api fails to respond. This metric feeds a
    # walking average of uptime availability for the last 24 hours so
    # while this metric may alarm and recover, the availability for the
    # last 24 hours will take a full 24 hours from the last reported alarm
    # to return to 100%.
    - { name: "Swift service per-minute availability",
        description: "Alarms if the swift service reports unavailable for the previous minute",
        severity: "HIGH",
        expression: "swiftlm.umon.target.val.avail_minute < 100",
        match_by: ["control_plane", "cloud_name"]}

- name: swift-monitor  | monasca_alarms | Remove old monasca alarm definitions
  run_once: true
  monasca_alarm_definition:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    keystone_url: "{{ keystone_url }}"
    keystone_user: "{{ keystone_user }}"
    keystone_password: "{{ keystone_password }}"
    keystone_project: "{{ keystone_project }}"
    monasca_api_url: "{{ monasca_alarm_definition_api_url }}"
  with_items:
    - { name: "Swift host ping",
        state: "absent"}
    - { name: "Swift memcache connect",
        state: "absent"}
    - { name: "Swift services",
        state: "absent"}
  ignore_errors: yes

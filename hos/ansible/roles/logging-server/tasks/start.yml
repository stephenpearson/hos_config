#
# (c) Copyright 2015,2016 Hewlett Packard Enterprise Development Company LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---
- name: logging-server | start | Restart Elasticsearch
  service: name=elasticsearch state=restarted
  when: hlm_notify_elasticsearch_restart is defined and hlm_notify_elasticsearch_restart.changed
    or not hlm_notify_kronos_restart is not defined and hlm_notify_kronos_restart.changed

- name: logging-server | start | Start Elasticsearch
  service: name=elasticsearch state=started
  register: elasticsearch_started

- name: logging-server | start | Checking systemd status for Elasticsearch
  command: systemctl status elasticsearch
  changed_when: false
  register: elastic_result
  until: elastic_result.stdout.find("running") > -1
  retries: 60
  delay: 10
  ignore_errors: true

# Logstash should automatically be restarted by Elasticsearch via systemd dependencies
# however it may not be reliable in all cases so allow for explicit restarts as well
- name: logging-server | start | Restart Logstash
  service: name=logstash state=restarted
  when: hlm_notify_logstash_restart is defined and hlm_notify_logstash_restart.changed
    or not hlm_notify_kronos_restart is not defined and hlm_notify_kronos_restart.changed
  ignore_errors: true

- name: logging-server | start | Start Logstash
  service: name=logstash state=started
  ignore_errors: true

- name: logging-server | start | Restart Kibana
  service: name=kibana state=restarted
  when: not hlm_notify_kibana_restart is not defined and hlm_notify_kibana_restart.changed
    or hlm_notify_kronos_restart is defined and hlm_notify_kronos_restart.changed

- name: logging-server | start | Start Kibana
  service: name=kibana state=started

# This check is to see if apache is started, if not then
# we expect that start_reload.yml will start it
- name: logging-server | start | Check is apache started
  command: "systemctl status apache2"
  ignore_errors: true
  register: kronos_is_apache_up

# Set kronos_apache_start to true as we now expect it to be started next
- name: logging-server | start | Set kronos_apache_started
  set_fact: kronos_apache_started=true
  when: kronos_is_apache_up | failed

# Ensure Apache is reloaded via Apache owned playbook
- include: "{{ playbook_dir }}/roles/FND-AP2/tasks/start_reload.yml"
  vars:
    apache_reload_requested: "{{ hlm_notify_kibana_restart is defined and hlm_notify_kibana_restart.changed
      or hlm_notify_kronos_apache_reload is defined and hlm_notify_kronos_apache_reload.changed }}"

# Prime Kibana if required
- name: logging-server | start | Prime Kibana
  shell: nohup python {{ kibana_path }}/prime_kibana.py &
  run_once: true
